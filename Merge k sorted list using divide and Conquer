Node* merge(Node* head1,Node* head2){
        if(head1==NULL)
        return head2;
        if(head2==NULL)
        return head1;
        if(head1->data>head2->data)
        swap(head2,head1);
        Node* res=head1;
        while(head1!=NULL && head2!=NULL){
            Node* temp=NULL;
            while(head1!=NULL && head1->data<=head2->data)
            {
                temp=head1;
                head1=head1->next;
            }
            temp->next=head2;
            swap(head1,head2);
        }
        return res;
    }
    Node* divide(Node* arr[],int start,int end){
        if(start>end)
        return NULL;
        if(start==end)
        return arr[start];
        int mid=start+(end-start)/2;
        Node* left=divide(arr,start,mid);
        Node* right=divide(arr,mid+1,end);
        return merge(left,right);
    }
    Node * mergeKLists(Node *arr[], int K)
    {
          return divide(arr,0,K-1);
    }
